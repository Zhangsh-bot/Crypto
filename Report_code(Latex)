\documentclass[a4paper]{article}
\usepackage{fontspec}
\usepackage{hyperref}
\hypersetup{hidelinks,
	colorlinks=true,
	allcolors=black,
	pdfstartview=Fit,
	breaklinks=true
}
\usepackage{amsmath}
\usepackage{xpatch}

\ExplSyntaxOn
\xpatchcmd \fontspec_new_script:nn
{ \__fontspec_warning:nxx }
{ \__fontspec_info:nxx }
{}{\fail}

\newfontscript{CJK}{hani}
\ExplSyntaxOff

\usepackage{xeCJK}
\usepackage{ctex}
\usepackage{lipsum}
\usepackage{graphicx}
\usepackage{geometry}
\usepackage{indentfirst}
\setlength{\parindent}{2em}
\setlength{\parskip}{1em}
% for check box
\usepackage{enumitem,amssymb}
% for check symbol 
\usepackage{pifont}

\usepackage{listings}
\usepackage{color}

\definecolor{dkgreen}{rgb}{0,0.6,0}
\definecolor{gray}{rgb}{0.5,0.5,0.5}
\definecolor{mauve}{rgb}{0.58,0,0.82}

\lstset{frame=tb,
	language=Java,
	aboveskip=3mm,
	belowskip=3mm,
	showstringspaces=false,
	columns=flexible,
	basicstyle={\small\ttfamily},
	numbers=none,
	numberstyle=\tiny\color{gray},
	keywordstyle=\color{blue},
	commentstyle=\color{dkgreen},
	stringstyle=\color{mauve},
	breaklines=true,
	breakatwhitespace=true,
	tabsize=3
}

\newcommand{\cmark}{\ding{51}}% check mark
\newcommand{\done}{\rlap{$\square$}{\raisebox{2pt}{\large\hspace{1pt}\cmark}}\hspace{-2.5pt}}
\pagestyle{plain}

\begin{document}
	\thispagestyle{empty}
	\noindent\parbox[c]{.6\linewidth}{
		\linespread{1.3}
%		\itshape 编号： CACR20XXxxxxxx \par
		\  \par
		\  \par
		作品类别：\done 软件设计\ \ {\rlap{$\square$}{\large\hspace{1pt}}}\ \ 硬件制作\ \ {\rlap{$\square$}{\large\hspace{1pt}}}\ \ 工程实践 \par
	}%
%	\parbox[c]{.45\linewidth}{
%		\hfill\includegraphics[width=4cm]{imgs/logo.png}
%	}
	\begin{center}
		
		\par\vspace{.2\textheight}
		
		{\Large\textbf{2024年第九届全国密码技术竞赛作品设计报告}\par}
		\Large
		\rule{\textwidth}{0.5mm}
		\par\vspace{.05\textheight}
		\Large{题目：基于SHA256算法的自同步流密码设计与实现}
		
		\medbreak
		\par\vspace{.25\textheight}
		\medbreak
		20xx年xx月xx日
		\medbreak
		中国密码学会
	\end{center}
	\vfill
	% 项目信息
%	\begin{center}
%		\begin{tabular}{ | p{.95\hsize} | }
%			\hline
%			基本信息表 \\
%			\hline
%			编号：CACR20XXxxxxxx \\
%			\hline
%			作品题目：示例题目\\
%			\hline
%			作品类别：\done 软件设计\ \ {\rlap{$\square$}{\large\hspace{1pt}}}\ \ 硬件制作\ \ \ {\rlap{$\square$}{\large\hspace{1pt}}}\ \ 工程实践 \\
%			\hline
%			作品内容摘要：\\
%			\par 摘要
%			\\\\
%			作品特色：\\
%			\ \ \ \ 1）特色：\\
%			\ \ \ \ 2）特色：\\
%			\ \ \ \ 3）特色：\\
%			\ \ \ \ 4）特色：\\
%			\hline
%			关键词：\\
%			示例关键词
%			\\
%			\hline
%		\end{tabular}
%	\end{center}
	
	\clearpage
	\tableofcontents
	\clearpage
	\section{第一章 - 作品概述}
	\subsection{引言}
	在信息安全领域，密码学一直扮演着至关重要的角色，它确保了信息的机密性、完整性和认证性。随着技术的飞速发展，密码学也在不断演进，以应对日益复杂的威胁和挑战。自同步流密码（Self-Synchronizing Stream Cipher）作为密码学的一个重要分支，以其独特的性质和广泛的应用场景，成为了当下研究的热点。\par
	
	自同步流密码，又称作自恢复流密码或自校正流密码，是一类特殊的流密码。除了流密码具备的加密速度快，资源占用少等优势外，自同步流密码在加密或解密过程中，即使出现短暂的同步丢失或错误，系统也能在后续操作中自动恢复同步，继续正确地产生或解读密钥流。这种特性使得自同步流密码在通信环境不稳定、错误率较高的场景中具有显著的优势。\par
	
	同时，哈希散列函数是一种将任意长度的数据（通常称为“消息”或“输入”）映射为固定长度数据（称为“哈希值”或“散列值”）的函数。这种映射过程具有单向性，即散列值的生成是不可逆的，无法通过散列值恢复出原始数据。同时，哈希散列函数还具有雪崩效应，即输入数据的微小变化会导致散列值的显著不同，这一特性使得哈希散列函数在数据完整性校验中具有极高的灵敏度。\par
	
	本文旨在深入设计一种更加安全有效的自同步流密码，将哈希散列函数应用在自同步流密码的密钥生成中，利用哈希散列函数的不可逆性获得更加随机的密钥流，以求获得更强的安全性能。在此基础上，我们还将对该自同步流密码的性能进行评估，包括其加密速度、密钥空间大小、抵抗各种攻击的能力等。此外，本文也将探讨该自同步流密码在现实世界中的应用场景。例如，在无线通信、卫星通信等容易受到干扰的环境中，自同步流密码可以有效地保障信息的传输安全等。\par
	\subsection{研究背景与意义}
	随着信息技术的飞速发展，信息安全问题日益凸显。如何保障数据在传输、存储和处理过程中的机密性、完整性和可用性，已成为当前信息技术领域亟待解决的重要问题。自同步流密码是一种在通信中即使出现短暂错误或干扰也能自行恢复同步的密码体制。这种特性使得它在无线通信、卫星通信等容易受到干扰的环境中具有显著的优势。而SHA256作为SHA-2系列算法中的一种，具有安全性高、计算效率高、生成哈希值长度固定等特点。它是目前广泛使用的哈希算法之一，被广泛应用于数据加密、密码存储、数字签名等领域。将SHA256算法与自同步流密码相结合，或许可以结合两者优势。设计出既具有高效性又具有自同步性的新型密码体制，这种密码体制能够同时满足信息安全和实时通信的需求，具有广阔的应用前景。\par
	
	通过将SHA256算法应用于自同步流密码的设计中，可以进一步拓展SHA256算法的应用范围。这种新型密码体制不仅可以用于数据加密和数字签名等传统领域，还可以应用于无线通信、卫星通信等实时通信领域，为这些领域的信息安全提供新的解决方案。同时，这或许也将推动密码学领域在实时通信和信息安全方面的发展。通过深入探索这种新型密码体制的工作原理、安全特性和应用场景，可以为密码学领域的研究和实践提供新的思路和方向。\par
	\subsection{国内外研究现状}
	流密码算法的研究在国际上已有较长历史，其安全性的关键在于密钥流的随机性，国内外对流密码的研究主要在于改进密钥流生成器的设计，提高算法的随机性和抗攻击能力，而自同步流密码特点在于密钥序列的每一位都是其前面固定数量密文位函数的序列密码，这种机制意味着密钥流通常只由分组加密算法和明文有关，实际应用中明文往往具有统计学上的特征，密钥流的随机性只能由加密算法保证，然而太简单的加密算法不能保证安全性，过于复杂的加密算法又会增加其时间复杂度从而抛弃了流密码自身的优势，国际标准化组织（如NIST、ISO等）对自同步流密码算法进行了标准化工作后，进一步创新是较为困难的，这也使得近年来国内外对于自同步流密码的研究相对较少。
	
	另一方面，国家对密码学领域给予了高度重视，出台了一系列政策措施支持密码学的研究与应用，为其研究提供了良好的政策环境。国内在相关领域的研究团队众多，包括高校、研究机构和企业等。这些团队在算法设计、优化和应用方面取得了一系列重要成果。例如，一些团队提出了新型的自同步流密码算法，通过改进密钥流生成器的设计，提高了算法的随机性和安全性。同时，在密码学相关的国际学术会议、高水平学术论文中也可以看到自同步流密码的出现，总而言之，国内外研究团队推动了自同步流密码在实际应用中的普及与发展，随着信息安全需求的不断增长和新技术的不断涌现，自同步流密码的研究与应用将继续深入发展。
	
	\clearpage
	\section{第二章 - 设计实现与方案}
	\subsection{方案设计}
	由于python中具有成熟的库函数并且已经有了对sha256算法的实现(hashlib中的sha256函数)，因此我们使用python语言来实现基于SHA256算法的自同步流密码。根据自同步流密码的原理，我们将明文以256比特分组，假设接受双方共享初始密钥IV（在算法中用伪随机数生成器生成），则第一组密文由明文与IV的摘要（即对IV进行sha256运算）异或得到，其后的每一组密文都由前一组密文的摘要与明文异或得到，最终将每组密文组合即可得到总密文。为了保持传输过程的同步性，结合sha256算法本身在认证领域的应用，我们将每n组明文的摘要放在密文后以进行同步验证，由于哈希散列函数的敏感性，这样进行的同步验证可以有效避免同步传输中出现的错误增、删比特的错误。主要函数的实现代码如下所示：

	\subsection{代码实现}
	关键代码\par
	\begin{lstlisting}[language=Python]
		import os
		from hashlib import sha256
		
		def bytes_split(obj:bytes,sec:int = 32):
			return[obj[i:i+sec] for i in range(0,len(obj),sec)]
		
		def SHA256(s:bytes):
			obj = sha256()
			obj.update(s)
			return obj.digest()
		
		def bxor(b1, b2): # use xor for bytes
			result = b""
			for b1, b2 in zip(b1, b2):
				result += bytes([b1 ^ b2])
			return result
		
		def bytes_comb(obj:list):
			b = b''
			for i in obj:
			b += i
			return b
		
		IV = os.urandom(32)
		
		def Encode(bm:bytes,IV:bytes):
			mlist = bytes_split(bm)
			group_num = len(mlist)
			clist = []
			for i in mlist:
				key = SHA256(IV)
				c = bxor(i,key)
				clist.append(c)
				IV = SHA256(c)
			return bytes_comb(clist)
		
		def Decode(c:bytes,IV:bytes):
			clist = bytes_split(c)
			mlist = []
			for i in clist:
				key = SHA256(IV)
				m = bxor(i,key)
				mlist.append(m)
				IV = SHA256(i)
			return bytes_comb(mlist)
	\end{lstlisting}

	\clearpage
	\section{第三章 - 系统测试与结果}
	流密码安全测试是确保加密通信和数据保护的关键环节。在现代信息安全领域，密码的安全性至关重要。通过对流密码算法进行全面、细致的安全测试，我们能够评估其在实际应用中抵御各种攻击的能力，从而确保数据在传输和存储过程中的安全性。只有通过严格的安全测试，我们才能及时发现并修复流密码算法中可能存在的安全漏洞，保障通信的机密性、完整性和可用性。接下来我们就将对该密码的以下性质进行测试：密钥流的随机性、加密算法的安全性，同步机制的有效性以及抗攻击性能等。
	\subsection{测试方案}
	
	
	密文随机性测试：由于自同步流密码的密码机制决定密钥流与明文密文息息相关，因此我们不妨直接测试密文的随机性，NIST测试（NIST Statistical Test Suite）是美国国家标准与技术研究院开发的一套用于评估二进制序列随机性的统计测试集。NIST测试被广泛用于密码学、仿真、模拟以及其他需要高质量随机数的应用中，其包含了频率测试、块内频率测试、游程测试、累加和测试等15项随机性测试，因此我们利用Github中开源的NIST测试代码(详情见$https://github.com/dj-on-github/sp800\_22\_tests$)来进行对本文算法生成密文的随机性测试，通过观察当明文不同是密文流的随机性，如当明文取伪随机数和取规律文字时密文的表现。
	
	密钥敏感性测试：通过检查密钥的变化对输出密文的影响程度，以验证算法是否对密钥的变化敏感。密钥不同时生成密文差距越大，意味着攻击者越难通过选择密文攻击等攻击方式进行密钥破解。具体实现就是先随机选定一个初始密钥IV1对明文进行加密得到密文1，再对IV1进行细微改动得到IV2，再对同一段明文进行加密得到密文2，比较两段密文的差异。
	
	同步性测试：同步流密码在实际应用中，由于各种因素的影响（如传输错误、数据丢失、网络延迟等），加密器和解密器之间的同步状态可能会受到破坏。如果自同步流密码的同步机制不够健壮，就可能导致解密失败或解密结果不正确。
	因此，对自同步流密码进行同步性测试是必要的。我们通过模拟各种同步破坏场景（如插入错误比特、删除比特、改变比特顺序等），来评估自同步流密码在这些场景下的表现（是否能及时且正确的的检测出位同步情况）。
	
	性能测试：速度快，运算简单是流密钥的一个重要优势，因此对于本文提到的自同步流密码也应对其运行速度进行测试，具体而言就是选择足够长的明文（如1000,000比特）并对其进行加密，统计运行时间并对其进行评估。
	\subsection{测试结果}
	\subsubsection{密文随机性测试}
	当明文采用不同主题的英文时，分别尝试不同IV下密文在NIST测试下的表现，经过反复测试，当取伪随机的初始密钥IV和足够长度的明文时（$>10000bit$），生成的密文大概率（不同明文下的表现略有差异，但不同密钥下的密文随机性表现类似）可以通过
	\begin{enumerate} 
		\item 最大游程检测
		\item 频谱测试
		\item 非重叠字匹配测试
		\item 重叠字匹配测试
		\item Maurer通用统计检测
		\item 线性复杂度测试
		\item 随机游程测试
		\item 随机游程变量测试
	\end{enumerate}

	即采用该算法产生的密文可以通过8/15项NIST测试，因此可以基本判定该算法产生的密文随机性良好,具有良好的抗攻击性。
	\subsubsection{密钥敏感性测试}
	当选定固定长度的明文后，随机选取初始密钥IV，加密明文并记录密文结果，再对IV进行细微改动（如改变其中1比特），重新加密明文并记录密文结果，比较两次加密结果差异（这里我们比较两个密文串的汉明距离，即将两密文串异或后统计结果中1的个数，将其与总长度进行比较），选取不同明文以及不同初始密钥IV，可以发现汉明距离大致为总字符长度的一半，因此改变IV1比特时密文产生的变化是十分可观的，从而该算法对密钥具有一定的敏感性。
	\subsubsection{同步性测试}
	由于该算法采用SHA256对分组信息进行概要处理以验证同步性，而SHA256算法具有很强的抗碰撞性，这不仅保证了该算法密钥的敏感性也保证了算法的同步性，为模拟同步错误的情况，我们对传输过程（如用于下一组密钥生成的密文）分别进行了插入错误比特、删除比特、改变比特顺序的处理，经过多次实验可以发现算法能较为准确的识别传输过程中出现的错误情况并进行重新同步，这也印证了SHA256算法的抗碰撞性。
	\subsubsection{性能测试}
	利用python中的time模块，我们可以直接测量指定代码运行时间，经过多次测试，在64位系统下每传输1M比特所需平均时间为$0.0311773s$，经过换算为$32.074Mbits/s$，这比通常的流密码速稍慢，但相对其他密码来说仍具有速度优势，这意味着该算法为换取安全性而牺牲的运算速度仍在可接受范围内。
	%\clearpage
	\section{第四章 - 应用前景}
	SHA256算法作为一种广泛使用的哈希函数，其安全性、稳定性和高效性已经得到了业界的广泛认可。而自同步流密码作为一种特殊的密码体制，具有独特的同步机制和安全性特点。将SHA256算法应用于自同步流密码中，可以为密码体制的安全性带来新的提升。
	
	首先，SHA256算法具有很强的抗碰撞性，即很难找到两个不同的输入消息产生相同的哈希值。这一特性使得基于SHA256算法的自同步流密码在防止伪造和篡改方面具有很高的安全性。
	并且，SHA256算法是单向的，即无法通过哈希值还原出原始输入消息。这一特性使得基于SHA256算法的自同步流密码在保护敏感信息方面具有很高的安全性，即使密码被截获，攻击者也无法轻易获取原始信息。
	
	
	基于SHA256算法的自同步流密码可以为网络通信提供安全可靠的加密保护，良好的随机性也使得密码分析变得更加困难，有效抵御了各种破解攻击，防止信息泄露和篡改，同时快速的加密和解密速度也减少了数据传输的延迟，提高了用户体验。未来在网络通信安全、敏感数据保护、数字签名和身份验证等领域或能发挥重要作用。
	
	随着计算机技术的不断发展，对密码算法的性能要求也越来越高。未来，基于SHA256算法的自同步流密码可能会进一步优化算法结构，提高加密速度和安全性。
	同时,未来可能会采用多种密码算法进行融合，形成更加安全可靠的密码体制。基于SHA256算法的自同步流密码可以与其他密码算法进行融合，形成更加完善的密码体系。
	
	综上所述，基于SHA256算法的自同步流密码具有广阔的应用前景和发展空间。未来，随着技术的不断发展和应用场景的不断拓展，基于SHA256算法的自同步流密码将在网络安全领域发挥越来越重要的作用。
	%\clearpage
	\section{第五章 - 结论}
	通过对本文提出的新型密码————基于SHA256算法的自同步流密码的探索，可以丰富加密技术的理论体系，由于自同步机制有效解决了传统流密码在传输过程中可能遇到的同步丢失问题，从而提高了加密信息的可靠性和安全性，而SHA256算法具有信息传递的不可逆性及抗碰撞性，将两者结合可以一定程度上使新算法兼具两者优势，同时这也启示我们可以将两种已知的算法有机结合进而得到更具优势的“杂交算法”，这也有利于推进现代密码体系的进步。
	
	经过安全性及性能测试，我们设计的自同步流密码产生的加密结果具有较好的随机性，对密钥的变化较为敏感，抗攻击性较强，同时可以准确发现同步过程中的错误并回复通讯，牺牲了有限的加密速度而换取了更高的安全性，总体来看相比于一些密码仍具有一定优势。
	
	展望未来，若加以改进和标准化，基于SHA256算法的自同步流密码或许具有广阔的应用前景，在物联网、云计算和大数据等技术这些领域发挥重要作用。例如，在物联网领域，该密码可以用于保护传感器节点之间的通信安全；在云计算领域，它可以用于保护存储在云端的数据安全；在大数据领域，该密码可以用于保护数据的传输和存储安全。此外，随着量子计算技术的不断发展，传统加密算法面临严峻挑战。作为一种具有量子安全性的加密算法，该类密码或许将在未来量子信息时代发挥重要作用。
	%\clearpage
	%\begin{thebibliography}{99}
	%	\bibitem{ref1} 示例引用文章
	%\end{thebibliography}
	
\end{document}
